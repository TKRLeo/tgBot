import asyncio
from os import getenv
import re
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove
from dotenv import load_dotenv
from aiogram import F
from sqlalchemy import create_engine
from keyboards.reply_kb import *
from config import *
from src.database.db_utils import db_register_user, is_exists,db_get_vacancy

dp = Dispatcher()
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
class RegistrationStates(StatesGroup):
    waiting_for_registration = State()

@dp.message(CommandStart())
async def command_start(message: Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b>!\n–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –ø–æ–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π! –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã.\n",
                         reply_markup=kb_register)

@dp.message(RegistrationStates.waiting_for_registration)
async def parse_register(message: Message,state: FSMContext):
    required_fields = {
        "–§–ò–û": None,
        "–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è": None,
        "–ü–æ–ª": None,
        "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã": None,
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": None,
        "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ": None,
        "–î–∏–ø–ª–æ–º": None
    }
    tokens = message.text.split("\n")

    for token in tokens:
        for key in required_fields.keys():
            if token.startswith(key + ":"):
                required_fields[key] = token[len(key) + 1:].strip().capitalize()
                break

    for key, value in required_fields.items():
        if value is None:
            await message.answer(text=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ: {key}")

    birth_date_str = required_fields["–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"]

    if not re.match(r'^\d{2}\.\d{2}\.\d{2}$', birth_date_str):
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì.")
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
    try:
        birth_date = datetime.strptime(birth_date_str, '%d.%m.%y')
    except ValueError:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
        return

    try:
        experience = int(required_fields['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'])
    except:
        await message.answer(text="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ª–µ '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'")
        return

    name = required_fields["–§–ò–û"]
    birthday = required_fields["–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"]
    gender = required_fields["–ü–æ–ª"]
    education = required_fields["–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"]
    citizen = required_fields["–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ"]
    diplom = required_fields["–î–∏–ø–ª–æ–º"]
    chat_id = message.chat.id

    if db_register_user(name, birthday, gender, experience, education, citizen, diplom, chat_id):
        await message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å")
    else:
        await message.answer(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞!")
    await state.clear()
@dp.message(F.text == "–í–∞–∫–∞–Ω—Å–∏–∏")
async def send_vacancy(message: Message):
    vacancies = db_get_vacancy()
    vacancies_text = "–°–ø–∏—Å–æ–∫ –í–∞–∫–∞–Ω—Å–∏–π:\n\n"

    for vacancy in vacancies:
        enterprise = vacancy.enterprise_vacancy
        vacancies_text += (
            f"üìù –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.post}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {enterprise.name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {enterprise.address}\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
            f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {vacancy.age} –ª–µ—Ç\n"
            f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {vacancy.education}\n"
            f"üõ†Ô∏è –û–ø—ã—Ç: {vacancy.experience} –ª–µ—Ç\n"
            f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {vacancy.citizen}\n"
            f"üîñ –õ–∏—Ü–µ–Ω–∑–∏—è: {enterprise.license}\n"
            f"{'=' * 40}\n"
        )
    await message.answer(vacancies_text)
@dp.message(F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register_user(message: Message, state: FSMContext):

    if is_exists(message.chat.id):
        await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞!",reply_markup=kb_main)
        return
    registration_text = (
        "<b>–§–ò–û:</b>\n"
        "<b>–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:</b>\n"
        "<b>–ü–æ–ª:</b>\n"
        "<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n"
        "<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
        "<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b>\n"
        "<b>–î–∏–ø–ª–æ–º:</b>\n"
    )
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ.(–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É)")
    await message.answer(registration_text, parse_mode='HTML',reply_markup=kb_main)
    await state.set_state(RegistrationStates.waiting_for_registration)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
