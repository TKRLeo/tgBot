import re

from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from aiogram.fsm.context import FSMContext

from src.database.db_utils import db_get_vacancy_of_manager, db_get_enterprise_by_id, db_get_vacancy_request, \
    get_vacancies_by_id, update_vacancy_field, db_add_vacancy, db_add_enterprise, is_exists, is_exists_manager, \
    db_add_manager, delete_vacancy_by_id
from src.keyboards.inline_kb import update_vacancy_kb, add_company_kb, delete_company_kb
from src.keyboards.reply_kb import kb_manager
from src.main import dp, bot
from src.user_utils import get_applicant

class RegisterManager(StatesGroup):
    waiting_form = State()
class AddVacancy(StatesGroup):
    waiting_data = State()
class AddEnterprise(StatesGroup):
    waiting_enterprise = State()
class UpdateVacancyForm(StatesGroup):
    waiting_value = State()
    vacancy_index = State()
def get_vacancies(user_id):
    return db_get_vacancy_of_manager(user_id)

@dp.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏')
async def get_vacancy_of_manager(message: Message):
    vacancies = db_get_vacancy_of_manager(message.from_user.id)
    for vacancy in vacancies:
        enterprise = vacancy.enterprise_vacancy
        vacancies_text = ""
        vacancies_text += (
            f"üìù –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.post}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {enterprise.name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {enterprise.address}\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
            f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {vacancy.age} –ª–µ—Ç\n"
            f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {vacancy.education}\n"
            f"üõ†Ô∏è –û–ø—ã—Ç: {vacancy.experience} –ª–µ—Ç\n"
            f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {vacancy.citizen}\n"
            f"üîñ –õ–∏—Ü–µ–Ω–∑–∏—è: {enterprise.license}\n"
            f"{'=' * 40}\n"
            f"–ê–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è\n"
        )
        delete_company_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_company_{vacancy.id}')]
        ])
        await message.answer(vacancies_text,reply_markup=delete_company_kb)

@dp.callback_query(lambda c: c.data.startswith("delete"))
async def handler_delete_vacancy(callback_query: CallbackQuery):
    print(callback_query.data.split("_"))
    index = int(callback_query.data.split("_")[2])
    if delete_vacancy_by_id(index):
       await bot.answer_callback_query(callback_query.id, text="–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ")
    else:
       await bot.answer_callback_query(callback_query.id,text="–û—à–∏–±–∫–∞")

@dp.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏')
async def edit_vacancy(message: Message, state: FSMContext):
    vacancies = get_vacancies(message.from_user.id)
    if not vacancies:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")
        return


    for vacancy in vacancies:
        vacancies_text = ""
        enterprise = vacancy.enterprise_vacancy
        vacancy_text = (
            f"üìù –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.post}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {enterprise.name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {enterprise.address}\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
            f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {vacancy.age} –ª–µ—Ç\n"
            f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {vacancy.education}\n"
            f"üõ†Ô∏è –û–ø—ã—Ç: {vacancy.experience} –ª–µ—Ç\n"
            f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {vacancy.citizen}\n"
            f"üîñ –õ–∏—Ü–µ–Ω–∑–∏—è: {enterprise.license}\n"
        )


        vacancies_text += vacancy_text + "\n"


        edit_button = InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{vacancy.id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[edit_button]])
        await message.answer(vacancies_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(lambda cb: cb.data.startswith("edit_"))
async def process_edit_callback(callback_query: CallbackQuery,state:FSMContext):
    print(callback_query.data.split("_"))
    index = int(callback_query.data.split("_")[1])
    vacancy = get_vacancies_by_id(callback_query.from_user.id,index)
    await state.set_state(UpdateVacancyForm.waiting_value)
    await state.update_data(vacancy = vacancy)
    enterprise = vacancy.enterprise_vacancy
    vacancies_text = ""
    vacancies_text += (
        f"üìù –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.post}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {enterprise.name}\n"
        f"üìç –ê–¥—Ä–µ—Å: {enterprise.address}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
        f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {vacancy.age} –ª–µ—Ç\n"
        f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {vacancy.education}\n"
        f"üõ†Ô∏è –û–ø—ã—Ç: {vacancy.experience} –ª–µ—Ç\n"
        f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {vacancy.citizen}\n"
        f"üîñ –õ–∏—Ü–µ–Ω–∑–∏—è: {enterprise.license}\n"
        f"{'=' * 40}\n"
    )

    await callback_query.message.answer(vacancies_text, reply_markup=update_vacancy_kb)

@dp.callback_query(lambda c: c.data.startswith("update_vacancy"))
async def process_edit_vacancy(callback_query: CallbackQuery, state: FSMContext):
    field_map = {
        'update_post': 'post',
        'update_salary': 'salary',
        'update_age': 'age',
        'update_education': 'education',
        'update_experience': 'experience',
        'update_citizen': 'citizen',
    }
    print(callback_query.data)
    field = callback_query.data.split("_", 2)[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print(field)
    field = "update_" + field
    if field in field_map:
        field_key = field_map[field]
       # await state.set_state(UpdateVacancyForm.waiting_value)
        print(await state.get_data())
        await state.update_data(field=field_key)
        await bot.answer_callback_query(callback_query.id, text=f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_key}")
    else:
        await bot.answer_callback_query(callback_query.id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
@dp.message(StateFilter(UpdateVacancyForm.waiting_value))
async def update_vacancy(message: Message, state: FSMContext):
    user_data = await state.get_data()
    field = user_data.get("field")
    vacancy = user_data.get('vacancy')
    print(f"–í–∞–∫–∞–Ω—Å–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {vacancy}")
    if vacancy is None:
        await message.answer("–û—à–∏–±–∫–∞: –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        return
    if field:
        new_value = message.text
        update_vacancy_field(message.from_user.id, new_value, field,vacancy)
    await state.clear()
@dp.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–Ω—É–ª–∏—Å—å')
async def vacancy_request(message: Message):
    vacancies = db_get_vacancy_request()
    for vacancy in vacancies:
        enterprise = db_get_enterprise_by_id(vacancy.enterprise_id)
        vacancies_text = ""
        vacancies_text += (
            f"üìù –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.post}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {enterprise.name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {enterprise.address}\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
            f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {vacancy.age} –ª–µ—Ç\n"
            f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {vacancy.education}\n"
            f"üõ†Ô∏è –û–ø—ã—Ç: {vacancy.experience} –ª–µ—Ç\n"
            f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {vacancy.citizen}\n"
            f"üîñ –õ–∏—Ü–µ–Ω–∑–∏—è: {enterprise.license}\n"
            f"{'=' * 40}\n"
            f"–ê–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è\n"
            f"{get_applicant(message)}"
        )

        feedback_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"apply:{message.chat.id}:{vacancy.id}")]
        ])

        await message.answer(vacancies_text,reply_markup=feedback_kb)

@dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é')
async def add_vacancy(message: Message, state: FSMContext):
    await state.set_state(AddVacancy.waiting_data)
    vacancies_text = "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–æ–π\n\n"
    vacancies_text += (
        f"–í–∞–∫–∞–Ω—Å–∏—è:\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è:\n"
       # f"–ê–¥—Ä–µ—Å: \n"
        f"–ó–∞—Ä–ø–ª–∞—Ç–∞:\n"
        f"–í–æ–∑—Ä–∞—Å—Ç:\n"
        f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:\n"
        f"–û–ø—ã—Ç:\n"
        f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:\n"
     #   f"–õ–∏—Ü–µ–Ω–∑–∏—è:"
    )
    await message.answer(text=vacancies_text)
@dp.message(AddVacancy.waiting_data)
async def handler_add_vacancy(message: Message, state: FSMContext):
    await state.update_data(form = message.text)
    required_fields = {
        "–í–∞–∫–∞–Ω—Å–∏—è": None,
        "–ö–æ–º–ø–∞–Ω–∏—è": None,
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–í–æ–∑—Ä–∞—Å—Ç": None,
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": None,
        "–û–ø—ã—Ç": None,
        "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ": None,
    }
    tokens = message.text.split("\n")
    print(tokens)
    for token in tokens:
        for key in required_fields.keys():
            if token.startswith(key + ":"):
                data = token[len(key) + 1:].strip()
                required_fields[key] = None if data == "" else data

                break
    for key, value in required_fields.items():
        if value is None:
            await message.answer(text=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ: {key}")
            return


    try:
        salary = float(required_fields["–ó–∞—Ä–ø–ª–∞—Ç–∞"])
    except ValueError:
        await message.answer(text="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ª–µ '–ó–∞—Ä–ø–ª–∞—Ç–∞'")
        return

    try:
        age = int(required_fields['–í–æ–∑—Ä–∞—Å—Ç'])
        if age < 0:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer(text="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ª–µ '–í–æ–∑—Ä–∞—Å—Ç'")
        return


    vacancy_detail = {
        "–í–∞–∫–∞–Ω—Å–∏—è": required_fields["–í–∞–∫–∞–Ω—Å–∏—è"],
        "–ö–æ–º–ø–∞–Ω–∏—è": required_fields["–ö–æ–º–ø–∞–Ω–∏—è"],
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": salary,
        "–í–æ–∑—Ä–∞—Å—Ç": age,
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": required_fields["–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"],
        "–û–ø—ã—Ç": required_fields["–û–ø—ã—Ç"],
        "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ": required_fields["–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ"],
    }
    if not db_add_vacancy(message.from_user.id,vacancy_detail):
        await message.answer(text="–¢–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏.",reply_markup=add_company_kb)
        return 

    await message.answer(text="–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    await state.clear()
@dp.callback_query(lambda c: c.data.startswith("add_enterprise"))
async def add_enterprise(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    text = ("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n")
    text += (
        "–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏:\n"
        "–ê–¥—Ä–µ—Å—Å:\n"
        "–õ–∏—Ü–µ–Ω–∑–∏—è:\n"
    )
    await state.set_state(AddEnterprise.waiting_enterprise)
    await bot.send_message(callback_query.from_user.id, text=text)


@dp.message(StateFilter(AddEnterprise.waiting_enterprise))
async def handler_enterprise(message:Message, state: FSMContext):
    required_fields = {
        "–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏": None,
        "–ê–¥—Ä–µ—Å—Å": None,
        "–õ–∏—Ü–µ–Ω–∑–∏—è": None,
    }

    tokens = message.text.split("\n")


    for token in tokens:
        for field in required_fields.keys():
            if token.startswith(field):
                data = token[len(field) + 1:].strip()
                required_fields[field] = None if data == "" else data
                break


    for field, value in required_fields.items():
        if value is None:
            await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ: {field}')
            return


    await state.update_data(form=required_fields)


    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ —Ñ–æ—Ä–º–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
        f"–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n"
        f"–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏: {required_fields['–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏']}\n"
        f"–ê–¥—Ä–µ—Å—Å: {required_fields['–ê–¥—Ä–µ—Å—Å']}\n"
        f"–õ–∏—Ü–µ–Ω–∑–∏—è: {required_fields['–õ–∏—Ü–µ–Ω–∑–∏—è']}"
    )

    db_add_enterprise(required_fields)
    await state.clear()
@dp.message(F.text == '–í–æ–π—Ç–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä')
async def register_manager(message:Message, state:FSMContext):
    if is_exists_manager(message.from_user.id):
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",reply_markup=kb_manager)
        return
    await message.answer(text="–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∏–∂–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    registration_text = (
        "<b>–§–ò–û:</b>\n"
        "<b>–í–æ–∑—Ä–∞—Å—Ç:</b>\n"
        "<b>–ü–æ–ª:</b>\n"
        "<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>\n"
        "<b>–ê–¥—Ä–µ—Å—Å:</b>\n"
    )
    await message.answer(text = registration_text)

    await state.set_state(RegisterManager.waiting_form)

@dp.message(StateFilter(RegisterManager.waiting_form))
async def parse_manager_registration(message: Message, state: FSMContext):
    required_fields = {
        "–§–ò–û": None,
        "–í–æ–∑—Ä–∞—Å—Ç": None,
        "–ü–æ–ª": None,
        "–¢–µ–ª–µ—Ñ–æ–Ω": None,
        "–ê–¥—Ä–µ—Å—Å": None
    }
    tokens = message.text.split("\n")

    for token in tokens:
        for key in required_fields.keys():
            if token.startswith(key + ":"):
                data = token[len(key) + 1:].strip()
                required_fields[key] = None if data == "" else data
                break


    for key, value in required_fields.items():
        if value is None:
            await message.answer(text=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ: {key}")

    age_str = required_fields["–í–æ–∑—Ä–∞—Å—Ç"]
    if age_str is not None and not age_str.isdigit():
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç '–í–æ–∑—Ä–∞—Å—Ç'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    phone_str = required_fields["–¢–µ–ª–µ—Ñ–æ–Ω"]
    if phone_str is not None and not re.match(r'^\+?\d{10,15}$', phone_str):
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç '–¢–µ–ª–µ—Ñ–æ–Ω'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +1234567890.")
        return

    if db_add_manager(required_fields,message.from_user.id):
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å")
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    await state.clear()