import re
from datetime import datetime

from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram import F

from src.database.db_utils import is_exists, db_get_applicant, db_get_vacancy, db_register_user, update_applicant_field, \
    db_apply_to_vacancy
from src.keyboards.inline_kb import update_applicant_kb
from src.keyboards.reply_kb import kb_main
from src.main import dp, bot


class RegistrationStates(StatesGroup):
    waiting_for_registration = State()

class Form(StatesGroup):
    waiting_for_value = State()


@dp.message(F.text == "–í–æ–π—Ç–∏ –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å")
async def register_user(message: Message, state: FSMContext):
    if is_exists(message.chat.id):
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å!",reply_markup=kb_main)
        return
    registration_text = (
        "<b>–§–ò–û:</b>\n"
        "<b>–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:</b>\n"
        "<b>–ü–æ–ª:</b>\n"
        "<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n"
        "<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
        "<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b>\n"
        "<b>–î–∏–ø–ª–æ–º:</b>\n"
    )
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ.(–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É)")
    await message.answer(registration_text, parse_mode='HTML',reply_markup=kb_main)
    await state.set_state(RegistrationStates.waiting_for_registration)


@dp.message(RegistrationStates.waiting_for_registration)
async def parse_register(message: Message,state: FSMContext):
    required_fields = {
        "–§–ò–û": None,
        "–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è": None,
        "–ü–æ–ª": None,
        "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã": None,
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": None,
        "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ": None,
        "–î–∏–ø–ª–æ–º": None
    }
    tokens = message.text.split("\n")

    for token in tokens:
        for key in required_fields.keys():
            if token.startswith(key + ":"):
                required_fields[key] = token[len(key) + 1:].strip()
                break

    for key, value in required_fields.items():
        if value is None:
            await message.answer(text=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ: {key}")

    birth_date_str = required_fields["–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"]

    if not re.match(r'^\d{2}\.\d{2}\.\d{2}$', birth_date_str):
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì.")
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
    try:
        birth_date = datetime.strptime(birth_date_str, '%d.%m.%y')
    except ValueError:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
        return

    try:
        experience = int(required_fields['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'])
    except:
        await message.answer(text="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ª–µ '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'")
        return

    name = required_fields["–§–ò–û"]
    birthday = required_fields["–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"]
    gender = required_fields["–ü–æ–ª"]
    education = required_fields["–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"]
    citizen = required_fields["–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ"]
    diplom = required_fields["–î–∏–ø–ª–æ–º"]
    chat_id = message.chat.id

    if db_register_user(name, birthday, gender, experience, education, citizen, diplom, chat_id):
        await message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å")
    else:
        await message.answer(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞!")
    await state.clear()

@dp.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
async def update_applicant(message: Message):
    text = get_applicant(message)

    await message.answer(text, reply_markup=update_applicant_kb)


def get_applicant(message: Message):
    id = message.chat.id

    applicant = db_get_applicant(id)

    name = applicant.name.strip()
    birthday = applicant.birthday.strip()
    gender = applicant.gender.strip()
    experience = applicant.experience
    education = applicant.education.strip()
    citizen = applicant.citizen.strip()
    diplom = applicant.diplom.strip()

    registration_text = f"""
<b>–§–ò–û:</b> {name}
<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthday}
<b>–ü–æ–ª:</b> {gender}
<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {experience}
<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {education}
<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {citizen}
<b>–î–∏–ø–ª–æ–º:</b> {diplom}
"""

    return registration_text


@dp.message(F.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞')
async def send_applicant_info(message: Message):
    await message.answer(get_applicant(message), parse_mode='HTML')


@dp.message(F.text == "–í–∞–∫–∞–Ω—Å–∏–∏")
async def send_vacancy(message: Message):
    vacancies = db_get_vacancy()
    await message.answer("–°–ø–∏—Å–æ–∫ –í–∞–∫–∞–Ω—Å–∏–π:\n\n")
    for vacancy in vacancies:
        enterprise = vacancy.enterprise_vacancy
        vacancies_text = ""
        vacancies_text += (
            f"üìù –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.post}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {enterprise.name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {enterprise.address}\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
            f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {vacancy.age} –ª–µ—Ç\n"
            f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {vacancy.education}\n"
            f"üõ†Ô∏è –û–ø—ã—Ç: {vacancy.experience} –ª–µ—Ç\n"
            f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {vacancy.citizen}\n"
            f"üîñ –õ–∏—Ü–µ–Ω–∑–∏—è: {enterprise.license}\n"
            f"{'=' * 40}\n"
        )

        hire_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', callback_data=f"apply:{message.chat.id}:{vacancy.id}")]
        ])
        await message.answer(vacancies_text, reply_markup=hire_kb)

@dp.callback_query(lambda cb: cb.data.startswith("apply:"))
async def apply_to_vacancy(callback_query: CallbackQuery):
    tokens = callback_query.data.split(":")  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –≤–∞–∫–∞–Ω—Å–∏–∏
    print(tokens)
    db_apply_to_vacancy(int(tokens[1]), int(tokens[2]))
    await callback_query.answer("–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é!")  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


@dp.callback_query(lambda c: c.data.startswith('update_applicant'))
async def process_update_button(callback_query: CallbackQuery, state: FSMContext):
    print("fdsfdsfds")
    field_map = {
        'update_applicant_name': 'name',
        'update_applicant_birthday': 'birthday',
        'update_applicant_gender': 'gender',
        'update_applicant_experience': 'experience',
        'update_applicant_education': 'education',
        'update_applicant_citizenship': 'citizen',
        'update_applicant_diploma': 'diplom',
    }


    field = field_map.get(callback_query.data)
    print(field)
    if field:

        await state.update_data(field=field)


        await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")


        await state.set_state(Form.waiting_for_value)

        await callback_query.answer()



@dp.message(StateFilter(Form.waiting_for_value))
async def process_new_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    field = user_data.get('field')

    if field:

        new_value = message.text
        update_applicant_field(message.from_user.id, field, message.text)
        await bot.send_message(message.from_user.id, f"–í—ã –æ–±–Ω–æ–≤–∏–ª–∏ {field} –Ω–∞: {new_value}")


        await state.clear()
    else:
        await bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
